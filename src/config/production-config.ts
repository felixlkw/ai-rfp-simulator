// ÌîÑÎ°úÎçïÏÖò ÌôòÍ≤Ω ÏµúÏ†ÅÌôî ÏÑ§Ï†ï

export const PRODUCTION_CONFIG = {
  // OpenAI API ÏÑ§Ï†ï
  openai: {
    timeout: 8000, // 8Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
    maxRetries: 1, // ÏµúÏÜå Ïû¨ÏãúÎèÑ
    maxTokens: {
      deepResearch: 1500,
      rfpAnalysis: 1500,
      customerGeneration: 2000,
      evaluation: 2500
    },
    models: {
      fast: 'gpt-4o-mini', // Îπ†Î•∏ ÏùëÎãµÏö©
      standard: 'gpt-4o',  // ÌëúÏ§Ä ÌíàÏßà
      fallback: 'gpt-3.5-turbo' // Î∞±ÏóÖÏö©
    }
  },
  
  // ÏùëÎãµ ÏãúÍ∞Ñ Ï†úÌïú
  responseTimeouts: {
    deepResearch: 7000,   // 7Ï¥à
    rfpAnalysis: 5000,    // 5Ï¥à
    customerGeneration: 8000, // 8Ï¥à
    evaluation: 6000      // 6Ï¥à
  },
  
  // Cloudflare Workers Ï†úÌïú
  cloudflare: {
    cpuTimeLimit: 10000,  // 10Ï¥à CPU ÏãúÍ∞Ñ (Î¨¥Î£å)
    memoryLimit: 128,     // 128MB Î©îÎ™®Î¶¨
    requestTimeout: 10000 // 10Ï¥à ÏöîÏ≤≠ ÌÉÄÏûÑÏïÑÏõÉ
  },
  
  // ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ
  monitoring: {
    enablePerformanceLog: true,
    logSlowRequests: true,
    slowRequestThreshold: 5000 // 5Ï¥à Ïù¥ÏÉÅ
  },

  // Fallback Ï†ÑÎûµ
  fallback: {
    enableFallbackData: true,
    useStreamingForLargeRequests: true,
    chunkSize: 1000 // Ï≤≠ÌÅ¨ ÌÅ¨Í∏∞
  }
}

// ÌôòÍ≤Ω Í∞êÏßÄ Ïú†Ìã∏Î¶¨Ìã∞
export function isProductionEnvironment(): boolean {
  // Cloudflare Workers ÌôòÍ≤Ω Í∞êÏßÄ
  return typeof process === 'undefined' || 
         !process.env?.NODE_ENV ||
         typeof globalThis?.navigator !== 'undefined'
}

export function isWorkersUnbound(): boolean {
  // Workers Unbound ÏóÖÍ∑∏Î†àÏù¥Îìú ÏôÑÎ£å - Í∞ïÏ†ú ÌôúÏÑ±Ìôî
  if (typeof process === 'undefined' && 
      typeof globalThis?.navigator !== 'undefined') {
    console.log('üöÄ Workers Unbound 30Ï¥à Ï†úÌïú ÌôúÏö© (ÏóÖÍ∑∏Î†àÏù¥Îìú ÏôÑÎ£å)')
    return true // Workers Unbound Í≥µÏãù ÏóÖÍ∑∏Î†àÏù¥Îìú ÏôÑÎ£å
  }
  
  console.log('üîß Í∞úÎ∞ú ÌôòÍ≤Ω - 30Ï¥à Ï†úÌïú ÏãúÎÆ¨Î†àÏù¥ÏÖò')
  return true // Í∞úÎ∞úÏóêÏÑúÎèÑ 30Ï¥à Î°úÏßÅ ÌÖåÏä§Ìä∏
}

// Workers Unbound ÏµúÏ†ÅÌôî ÏÑ§Ï†ï
export const UNBOUND_CONFIG = {
  openai: {
    timeout: 25000, // 25Ï¥à ÌÉÄÏûÑÏïÑÏõÉ (30Ï¥à Ï†úÌïú ÎÇ¥)
    maxRetries: 2,
    maxTokens: {
      deepResearch: 4000,    // Îçî ÏÉÅÏÑ∏Ìïú Î∂ÑÏÑù
      rfpAnalysis: 4000,     // Îçî Ï†ïÌôïÌïú RFP Î∂ÑÏÑù  
      customerGeneration: 5000, // Îçî ÌíçÎ∂ÄÌïú ÌéòÎ•¥ÏÜåÎÇò
      evaluation: 4000
    }
  },
  performance: {
    enableDetailedLogging: true,
    trackCPUTime: true,
    warnThreshold: 20000 // 20Ï¥à Í≤ΩÍ≥†
  }
}

// ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Ïú†Ìã∏Î¶¨Ìã∞
export class PerformanceMonitor {
  private startTime: number
  
  constructor(private operationName: string) {
    this.startTime = Date.now()
    if (PRODUCTION_CONFIG.monitoring.enablePerformanceLog) {
      console.log(`[PERF] ${operationName} ÏãúÏûë`)
    }
  }
  
  end(success: boolean = true): number {
    const duration = Date.now() - this.startTime
    
    if (PRODUCTION_CONFIG.monitoring.enablePerformanceLog) {
      const status = success ? 'SUCCESS' : 'FAILED'
      console.log(`[PERF] ${this.operationName} ${status} - ${duration}ms`)
      
      if (PRODUCTION_CONFIG.monitoring.logSlowRequests && 
          duration > PRODUCTION_CONFIG.monitoring.slowRequestThreshold) {
        console.warn(`[PERF] SLOW REQUEST: ${this.operationName} took ${duration}ms`)
      }
    }
    
    return duration
  }
}

// CPU ÏãúÍ∞Ñ Ï∂îÏ†Å (Í∑ºÏÇ¨Ïπò)
export class CPUTimeTracker {
  private operations: Array<{name: string, start: number, end?: number}> = []
  
  startOperation(name: string): void {
    this.operations.push({
      name,
      start: Date.now()
    })
  }
  
  endOperation(name: string): void {
    const op = this.operations.find(o => o.name === name && !o.end)
    if (op) {
      op.end = Date.now()
    }
  }
  
  getTotalCPUTime(): number {
    return this.operations
      .filter(op => op.end)
      .reduce((total, op) => total + (op.end! - op.start), 0)
  }
  
  isNearLimit(): boolean {
    return this.getTotalCPUTime() > (PRODUCTION_CONFIG.cloudflare.cpuTimeLimit * 0.8)
  }
}